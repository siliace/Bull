#ifndef BULL_MATH_TRANSFORMATIONPIPELINE_CAMERA_HPP
#define BULL_MATH_TRANSFORMATIONPIPELINE_CAMERA_HPP

#include <Bull/Math/Matrix/Matrix4.hpp>
#include <Bull/Math/Vector/Vector3.hpp>

namespace Bull
{
    template <typename T>
    class Camera
    {
    public:

        /*! \brief Default constructor
         *
         */
        Camera();

        /*! \brief Constructor
         *
         * \param eye
         * \param target
         * \param up
         *
         */
        Camera(const Vector3<T>& eye, const Vector3<T>& target, const Vector3<T>& up = Vector3<T>::Up);

        /*! \brief Set the eye's position
         *
         * \param eye The position
         *
         * \return This
         *
         */
        Camera<T>& setEye(const Vector3<T>& eye);

        /*! \brief Get the eye's position
         *
         * \return The position
         *
         */
        const Vector3<T>& getEye() const;

        /*! \brief Set the target's position
         *
         * \param eye The position
         *
         * \return This
         *
         */
        Camera<T>& setTarget(const Vector3<T>& target);

        /*! \brief Get the target's position
         *
         * \return The position
         *
         */
        const Vector3<T>& getTarget() const;

        /*! \brief Set the up vector
         *
         * \param eye The position
         *
         * \return This
         *
         */
        Camera<T>& setUp(const Vector3<T>& up);

        /*! \brief Get the up vector
         *
         * \return The vector
         *
         */
        const Vector3<T>& getUp() const;

        /*! \brief Get the view matrix generated by the Camera
         *
         * \return The view matrix
         *
         */
        const Matrix4<T>& getMatrix() const;

    private:

        /*! \brief Recompute the view matrix
         *
         */
        void recomputeMatrix();

        Vector3<T> m_up;     /*!< The up vector */
        Vector3<T> m_eye;    /*!< The position */
        Matrix4<T> m_view;   /*!< The view matrix */
        Vector3<T> m_target; /*!< The target */
    };

    typedef Camera<int>          CameraI;
    typedef Camera<float>        CameraF;
    typedef Camera<double>       CameraD;
    typedef Camera<unsigned int> CameraUI;
}

#include <Bull/Math/TransformationPipeline/Camera.inl>

#endif //BULL_MATH_TRANSFORMATIONPIPELINE_CAMERA_HPP
