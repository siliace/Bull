#ifndef BULL_MATH_TRANSFORMATIONPIPELINE_CAMERA_HPP
#define BULL_MATH_TRANSFORMATIONPIPELINE_CAMERA_HPP

#include <Bull/Math/Matrix/Matrix4.hpp>
#include <Bull/Math/Vector/Vector3.hpp>

namespace Bull
{
    template <typename T>
    class Camera
    {
    public:

        /*! \brief Default constructor
         *
         */
        Camera();

        /*! \brief Constructor
         *
         * \param eye    The position of the Camera in the space
         * \param center The target to look at
         * \param up     The up vector of the Camera
         *
         */
        Camera(const Vector3<T>& eye, const Vector3<T>& center = Vector3<T>::Zero, const Vector3<T>& up = Vector3<T>::Up);

        /*! \brief Set the position of the Camera in the space
         *
         * \param eye The position
         *
         * \return This
         *
         */
        Camera& setPosition(const Vector3<T>& eye);

        /*! \brief Get the position of the Camera
         *
         * \return The position
         *
         */
        const Vector3<T> getPosition() const;

        /*! \brief Move the Camera
         *
         * \param offset The offset to move the Camera
         *
         * \return This
         *
         */
        Camera& move(const Vector3<T>& offset);

        /*! \brief Set the target of the Camera in the space
         *
         * \param center The target
         *
         * \return This
         *
         */
        Camera& setTarget(const Vector3<T>& center);

        /*! \brief Get the target of the Camera
         *
         * \return The target
         *
         */
        const Vector3<T> getTarget() const;

        /*! \brief Get the up vector of the Camera
         *
         * \return The up vector
         *
         */
        const Vector3<T>& getUp() const;

        /*! \brief Get the up vector of the Camera
         *
         * \return The up vector
         *
         */
        const Vector3<T>& getRight() const;

        /*! \brief Get the up vector of the Camera
         *
         * \return The up vector
         *
         */
        const Vector3<T>& getForward() const;

        /*! \brief Get the view matrix generated by Camera
         *
         * \return The view matrix
         *
         */
        const Matrix4<T>& getMatrix() const;

    private:

        /*! \brief Update the view matrix
         *
         */
        void updateMatrix();

        Vector3<T> m_up;
        Vector3<T> m_eye;
        Matrix4<T> m_view;
        Vector3<T> m_right;
        Vector3<T> m_target;
        Vector3<T> m_center;
        Vector3<T> m_forward;
    };

    typedef Camera<int>          CameraI;
    typedef Camera<float>        CameraF;
    typedef Camera<double>       CameraD;
    typedef Camera<unsigned int> CameraUI;
}

#include <Bull/Math/TransformationPipeline/Camera.inl>

#endif //BULL_MATH_TRANSFORMATIONPIPELINE_CAMERA_HPP
